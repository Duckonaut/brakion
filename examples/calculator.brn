impl std::Display for Value {
    fn display(self) -> str {
        match self {
            on Self::Integer return std::i32::to_str(self.value);
            on Self::Boolean return std::bool::to_str(self.value);
        }
        return "";
    }
}

type BinaryOperator {
    Add;
    Subtract;
    Multiply;
    Divide;
    Equal;
    NotEqual;
    Greater;
    GreaterEqual;
    Less;
    LessEqual;
    And;
    Or;

    # Match: A block of patterns and statements that are matched against the value
    # in order. All statements for all matching patterns are executed in order of
    # appearance in the match block.
    # If no patterns match, the else block is executed.
    pub fn from_str(s: str) -> Self | void {
        match s {
            on "+"      return Self::Add -> {};
            on "-"      return Self::Subtract -> {};
            on "*"      return Self::Multiply -> {};
            on "/"      return Self::Divide -> {};
            on "=="     return Self::Equal -> {};
            on "!="     return Self::NotEqual -> {};
            on ">"      return Self::Greater -> {};
            on ">="     return Self::GreaterEqual -> {};
            on "<"      return Self::Less -> {};
            on "<="     return Self::LessEqual -> {};
            on "and"    return Self::And -> {};
            on "or"     return Self::Or -> {};
            on 5        return Self::Add -> {};
            else        return void;
        }
    }

    # Type-preconditoning: Resolved at call site
    pub fn apply(self ? Self::Add, left: Value ? Value::Integer, right: Value ? Value::Integer) -> Value | void {
        return Value::Integer -> { value: left.value + right.value };
    }

    pub fn apply(self ? Self::Subtract, left: Value ? Value::Integer, right: Value ? Value::Integer) -> Value | void {
        return Value::Integer -> { value: left.value - right.value };
    }

    pub fn apply(self ? Self::Multiply, left: Value ? Value::Integer, right: Value ? Value::Integer) -> Value | void {
        return Value::Integer -> { value: left.value * right.value };
    }

    pub fn apply(self ? Self::Divide, left: Value ? Value::Integer, right: Value ? Value::Integer) -> Value | void {
        return Value::Integer -> { value: left.value / right.value };
    }

    pub fn apply(self ? Self::Equal, left: Value ? Value::Integer, right: Value ? Value::Integer) -> Value | void {
        return Value::Boolean -> { value: left.value == right.value };
    }

    pub fn apply(self ? Self::NotEqual, left: Value ? Value::Integer, right: Value ? Value::Integer) -> Value | void {
        return Value::Boolean -> { value: left.value != right.value };
    }

    pub fn apply(self ? Self::Greater, left: Value ? Value::Integer, right: Value ? Value::Integer) -> Value | void {
        return Value::Boolean -> { value: left.value > right.value };
    }

    pub fn apply(self ? Self::GreaterEqual, left: Value ? Value::Integer, right: Value ? Value::Integer) -> Value | void {
        return Value::Boolean -> { value: left.value >= right.value };
    }

    pub fn apply(self ? Self::Less, left: Value ? Value::Integer, right: Value ? Value::Integer) -> Value | void {
        return Value::Boolean -> { value: left.value < right.value };
    }

    pub fn apply(self ? Self::LessEqual, left: Value ? Value::Integer, right: Value ? Value::Integer) -> Value | void {
        return Value::Boolean -> { value: left.value <= right.value };
    }

    pub fn apply(self ? Self::Equal, left: Value ? Value::Boolean, right: Value ? Value::Boolean) -> Value | void {
        return Value::Boolean -> { value: left.value == right.value };
    }

    pub fn apply(self ? Self::NotEqual, left: Value ? Value::Boolean, right: Value ? Value::Boolean) -> Value | void {
        return Value::Boolean -> { value: left.value != right.value };
    }

    pub fn apply(self ? Self::And, left: Value ? Value::Boolean, right: Value ? Value::Boolean) -> Value | void {
        return Value::Boolean -> { value: left.value and right.value };
    }

    pub fn apply(self ? Self::Or, left: Value ? Value::Boolean, right: Value ? Value::Boolean) -> Value | void {
        return Value::Boolean -> { value: left.value or right.value };
    }

    # Catch-all if none of the other overloads match
    pub fn apply(self, left: Value, right: Value) -> Value | void { }
}

type UnaryOperator {
    Negate;
    Not;

    pub fn from_str(s: str) -> Self | void {
        match s {
            on "-"      return Self::Negate -> {};
            on "not"    return Self::Not -> {};
            else        return void;
        }
    }

    pub fn apply(self ? Self::Negate, value: Value ? Value::Integer) -> Value | void {
        return Value::Integer -> { value: -value.value };
    }

    pub fn apply(self ? Self::Not, value: Value ? Value::Boolean) -> Value | void {
        return Value::Boolean -> { value: !value.value };
    }

    pub fn apply(self, value: Value) -> Value | void { }
}

type Value {
    Integer {
        value: i32,
    }
    Boolean {
        value: bool,
    }

    pub fn from_str(s: str) -> Self | void {
        match s {
            on std::str::is_integer(s)
                return Self::Integer -> { value: std::i32::parse(s) as i32 };
            on "true"
                return Self::Boolean -> { value: true };
            on "false"
                return Self::Boolean -> { value: false };
            else
                return void;
        }
    }
}

type Parenthesis {
    Open;
    Close;

    pub fn from_str(s: str) -> Self | void {
        match s {
            on "("  return Self::Open -> {};
            on ")"  return Self::Close -> {};
            else    return void;
        }
    }
}

type Token {
    self {
        value: Value | BinaryOperator | UnaryOperator | Parenthesis | void,
    }
}

impl std::Display for Token {
    fn display(self) -> str {
        var value = self.value;
        match value {
            on Value
                return std::Display::display(value);
            on BinaryOperator
                match value {
                    on BinaryOperator::Add
                        return "+";
                    on BinaryOperator::Subtract
                        return "-";
                    on BinaryOperator::Multiply
                        return "*";
                    on BinaryOperator::Divide
                        return "/";
                    on BinaryOperator::Equal
                        return "==";
                    on BinaryOperator::NotEqual
                        return "!=";
                    on BinaryOperator::Greater
                        return ">";
                    on BinaryOperator::GreaterEqual
                        return ">=";
                    on BinaryOperator::Less
                        return "<";
                    on BinaryOperator::LessEqual
                        return "<=";
                    on BinaryOperator::And
                        return "and";
                    on BinaryOperator::Or
                        return "or";
                }
            on UnaryOperator
                match value {
                    on UnaryOperator::Negate
                        return "-";
                    on UnaryOperator::Not
                        return "not";
                }
            on Parenthesis
                match value {
                    on Parenthesis::Open
                        return "(";
                    on Parenthesis::Close
                        return ")";
                }
            on void
                return "EOF";
        }
        return "no match";
    }
}

type Expression {
    Unary {
        operator: UnaryOperator,
        operand: Expression
    }
    Binary {
        operator: BinaryOperator,
        left: Expression,
        right: Expression,
    }
    Value {
        value: Value,
    }

    pub fn evaluate(self) -> Value | void {
        match self {
            on Self::Unary {
                return self.operator.apply(self.operand.evaluate() as Value);
            }
            on Self::Binary {
                return self.operator.apply(self.left.evaluate() as Value, self.right.evaluate() as Value);
            }
            on Self::Value {
                return self.value;
            }
            # No else clause: Only possible if at compile time, the match is deemed exhaustive
        }
    }
}

type Lexer {
    self {
        source: str,
        tokens: [Token],
        current: i32,
        len: u64,
    }

    pub fn new(source: str) -> Self {
        return Self -> {
            source,
            tokens: [],
            current: 0,
            len: std::str::len(source),
        };
    }

    pub fn lex(self) -> [Token] {
        while self.current < self.len {
            self.lex_token();
        }

        self.tokens.push(Token -> { value: void });

        return self.tokens;
    }

    fn skip_whitespace(self) {
        while self.current < self.len
            and std::char::is_whitespace(self.source[self.current]) {
            self.advance();
        }
    }

    fn advance(self) {
        self.current = self.current + 1;
    }

    fn lex_token(self) {
        var c: char = self.source[self.current];

        # self.skip_whitespace();

        match c {
            on '(' {
                self.tokens.push(Token -> { value: Parenthesis::Open -> {} });
                self.advance();
            }
            on ')' {
                self.tokens.push(Token -> { value: Parenthesis::Close -> {} });
                self.advance();
            }
            on '+' {
                self.tokens.push(Token -> { value: BinaryOperator::Add -> {} });
                self.advance();
            }
            on '-' {
                self.tokens.push(Token -> { value: BinaryOperator::Subtract -> {} });
                self.advance();
            }
            on '*' {
                self.tokens.push(Token -> { value: BinaryOperator::Multiply -> {} });
                self.advance();
            }
            on '/' {
                self.tokens.push(Token -> { value: BinaryOperator::Divide -> {} });
                self.advance();
            }
            on '=' {
                self.advance();
                if self.current < self.len and self.source[self.current] == '=' {
                    self.advance();
                    self.tokens.push(Token -> { value: BinaryOperator::Equal -> {} });
                } else {
                    # TODO: Error
                }
            }
            on '!' {
                self.advance();
                if self.current < self.len and self.source[self.current] == '=' {
                    self.advance();
                    self.tokens.push(Token -> { value: BinaryOperator::NotEqual -> {} });
                } else {
                    self.tokens.push(Token -> { value: UnaryOperator::Not -> {} });
                }
            }
            on '>' {
                self.advance();
                if self.current < self.len and self.source[self.current] == '=' {
                    self.advance();
                    self.tokens.push(Token -> { value: BinaryOperator::GreaterEqual -> {} });
                } else {
                    self.tokens.push(Token -> { value: BinaryOperator::Greater -> {} });
                }
            }
            on '<' {
                self.advance();
                if self.current < self.len and self.source[self.current] == '=' {
                    self.advance();
                    self.tokens.push(Token -> { value: BinaryOperator::LessEqual -> {} });
                } else {
                    self.tokens.push(Token -> { value: BinaryOperator::Less -> {} });
                }
            }
            on std::char::is_digit(c) {
                var start: i32 = self.current;
                while self.current < self.len and std::char::is_digit(self.source[self.current]) {
                    self.advance();
                }
                self.tokens.push(Token -> {
                    value: Value::from_str(
                        std::str::substr(self.source, start, self.current)
                    ) as Value 
                });
            }
            on std::char::is_alpha(c) {
                var start: i32 = self.current;
                while self.current < self.len and std::char::is_alpha(self.source[self.current]) {
                    self.advance();
                }
                var substr: str = std::str::substr(self.source, start, self.current);
                var value = Value::from_str(substr);
                if value {
                    self.tokens.push(Token -> { value: value as Value });
                } else {
                    var operator = BinaryOperator::from_str(substr);
                    if operator {
                        self.tokens.push(Token -> { value: operator as BinaryOperator });
                    } else {
                        var operator = UnaryOperator::from_str(substr);
                        if operator {
                            self.tokens.push(Token -> { value: operator as UnaryOperator });
                        } else {
                            # TODO: Error
                        }
                    }
                }
            }
            else {
                self.advance();
                # TODO: Error
            }
        }
    }
}

type Parser {
    self {
        tokens: [Token],
        index: u32,
    }

    pub fn new(tokens: [Token]) -> Self {
        return Self -> {
            tokens: tokens,
            index: 0,
        };
    }

    fn current_token(self) -> Token {
        return self.tokens[self.index];
    }

    fn match_token(self, token: Token) -> bool {
        return self.current_token() == token;
    }

    pub fn parse(self) -> Expression | void {
        return self.parse_expression();
    }

    fn advance(self) {
        self.index = self.index + 1;
    }

    fn parse_expression(self) -> Expression | void {
        return self.parse_or();
    }

    fn parse_or(self) -> Expression | void {
        var left = self.parse_and();

        if left is void {
            return void;
        }

        var left = left as Expression;

        while self.current_token().value is BinaryOperator::Or {
            var operator = self.current_token().value;
            self.advance();
            var right = self.parse_and();

            if right is void {
                return void;
            }

            var right = right as Expression;

            left = Expression::Binary -> {
                operator: operator as BinaryOperator,
                left,
                right,
            };
        }
        return left;
    }

    fn parse_and(self) -> Expression | void {
        var left = self.parse_equality();

        if left is void {
            return void;
        }

        var left = left as Expression;

        while self.current_token().value is BinaryOperator::And {
            var operator = self.current_token().value;
            self.advance();
            var right = self.parse_equality();

            if right is void {
                return void;
            }

            var right = right as Expression;
            left = Expression::Binary -> {
                operator: operator as BinaryOperator,
                left,
                right,
            };
        }
        return left;
    }

    fn parse_equality(self) -> Expression | void {
        var left = self.parse_comparison();

        if left is void {
            return void;
        }

        var left = left as Expression;

        while self.current_token().value is BinaryOperator::Equal
            or self.current_token().value is BinaryOperator::NotEqual {
            var operator = self.current_token().value;
            self.advance();
            var right = self.parse_comparison();

            if right is void {
                return void;
            }

            var right = right as Expression;
            left = Expression::Binary -> {
                operator: operator as BinaryOperator,
                left,
                right,
            };
        }
        return left;
    }

    fn parse_comparison(self) -> Expression | void {
        var left = self.parse_addition();

        if left is void {
            return void;
        }

        var left = left as Expression;

        while self.current_token().value is BinaryOperator::Greater
            or self.current_token().value is BinaryOperator::GreaterEqual
            or self.current_token().value is BinaryOperator::Less
            or self.current_token().value is BinaryOperator::LessEqual {
            var operator = self.current_token().value;
            self.advance();
            var right = self.parse_addition();

            if right is void {
                return void;
            }

            var right = right as Expression;
            left = Expression::Binary -> {
                operator: operator as BinaryOperator,
                left,
                right,
            };
        }
        return left;
    }

    fn parse_addition(self) -> Expression | void {
        var left = self.parse_multiplication();

        if left is void {
            return void;
        }

        var left = left as Expression;

        while self.current_token().value is BinaryOperator::Add
            or self.current_token().value is BinaryOperator::Subtract {
            var operator = self.current_token().value;
            self.advance();
            var right = self.parse_multiplication();

            if right is void {
                return void;
            }

            var right = right as Expression;
            left = Expression::Binary -> {
                operator: operator as BinaryOperator,
                left,
                right,
            };
        }
        return left;
    }

    fn parse_multiplication(self) -> Expression | void {
        var left = self.parse_unary();

        if left is void {
            return void;
        }

        var left = left as Expression;

        while self.current_token().value is BinaryOperator::Multiply
            or self.current_token().value is BinaryOperator::Divide {
            var operator = self.current_token().value;
            self.advance();
            var right = self.parse_unary();

            if right is void {
                return void;
            }

            var right = right as Expression;
            left = Expression::Binary -> {
                operator: operator as BinaryOperator,
                left,
                right,
            };
        }
        return left;
    }

    fn parse_unary(self) -> Expression | void {
        if self.current_token().value is UnaryOperator {
            var operator = self.current_token().value;
            self.advance();
            var operand = self.parse_unary();
            return Expression::Unary -> {
                operator: operator as UnaryOperator,
                operand: operand as Expression,
            };
        } else if self.current_token().value is BinaryOperator::Subtract {
            self.advance();
            var operand = self.parse_unary();
            return Expression::Unary -> {
                operator: UnaryOperator::Negate -> {},
                operand: operand as Expression,
            };
        }
        return self.parse_primary();
    }

    fn parse_primary(self) -> Expression | void {
        var token = self.current_token();
        if token.value is Value {
            self.advance();
            return Expression::Value -> {
                value: token.value as Value,
            };
        }

        if token.value is Parenthesis::Open {
            self.advance();
            var expression = self.parse_expression();
            if self.current_token().value is Parenthesis::Close {
                self.advance();
                return expression;
            }
        }

        return void;
    }
}


fn main(args: [str]) -> i32 {
    var source = "1 + 2 * 3";
    if args.len() == 1 {
        source = args[0];
    }
    var lexer = Lexer::new(source);
    var tokens = lexer.lex();

    if tokens.len() == 0 {
        std::io::println("no input!");
        std::exit(1);
    }

    std::io::print("token count: ");
    std::io::println(std::u64::to_str(tokens.len()));

    std::io::println("tokens: [");
    for t in tokens {
        std::io::println("   " + std::Display::display(t) + ",");
    }
    std::io::println("]");

    var parser = Parser::new(tokens);
    var expression = parser.parse();

    if expression {
        var expression = expression as Expression;
        var value = expression.evaluate();
        if value {
            var value = value as Value;
            std::io::println(std::Display::display(value));
        } else {
            std::io::println("Error: Didn't evaluate to a value");
        }
    } else {
        std::io::println("Error: Didn't parse");
    }

    return 0;
}
