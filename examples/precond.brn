fn f(x: bool | i32 ? bool, y: bool | i32) -> i32 {
    if x {
        return 1;
    }
    return 0;
}

fn f(x: bool | i32 ? i32, y: bool | i32 ? i32) -> i32 {
    return x + y;
}

fn f(x: bool | i32 ? i32, y: bool | i32 ? bool) -> i32 {
    if y {
        return x;
    }
    return -x;
}

fn b() {
    f(true, true); # calls the first f
    f(true, 1); # calls the first f
    f(1, 1); # calls the second f
    f(1, true); # calls the third f
}

type Foo {
    A {
        x: i32,
    }
    B {
        y: bool,
    }
}

fn g(x: Foo ? Foo::A) -> i32 {
    return x.x;
}

fn h(x: Foo ? Foo::B) -> i32 {
    if x.y {
        return 1;
    }
    return 0;
}
