type Foo {
    pub fn do_something() -> void {
        # do something else
    }

type Bar {
    self {
        # inscrutable variable name
        a: i32,
        # b is just b
        b: Foo,
    }

    pub fn show(self) {
        std::println("a = {}", self.a);
    }
}

type Baz {
    self {
        c: i32 | Bar | Foo,
    }

    pub fn show(self) -> void {
        self.c?Bar.show()
    }
}

fn main() -> void {
    var a = Foo;
    var b = Bar { a: 5, b: a };
    var c = Baz { c: 5 };

    c.c = void;

    var x = c.c;

    match x {
        on void x.show(),
        else std::io::println("c is not void"),
    }

    c.c?Foo.do_something();
    c.c?Bar.do_something();
}
