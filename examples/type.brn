type Foo {
    pub fn do_something() -> void {
        # do something else
    }
}

type Bar {
    self {
        # inscrutable variable name
        a: i32,
        # b is just b
        b: Foo,
    }

    pub fn show(self) {
        std::println("a = {}", self.a);
    }
}

type Baz {
    self {
        c: i32 | Bar | Foo | void,
    }

    pub fn show(self) -> void {
        if self.c is Bar {
            self.c.show();
        }
    }
}

fn main() -> void {
    var a: Foo = Foo;
    var b: Bar = Bar -> { a: 5, b: a };
    var c: Baz = Baz -> { c: 5 };

    c.c = void;

    var x: void = c.c;

    match x {
        on void x.show();
        else std::io::println("c is not void");
    }

    if c.c is Bar or c.c is Foo {
        c.c.show();
    }
}
