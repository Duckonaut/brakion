type Foo {
    pub fn show(self) -> void {
        self.show_private();
    }

    fn show_private(self) -> void {
        std::io::println("Foo");
    }
}

type Bar {
    self {
        # inscrutable variable name
        a: i32,
        # b is just b
        b: Foo,
    }

    pub fn show(self) {
        std::io::println("a = " + std::i32::to_str(self.a));
    }
}

type Baz {
    self {
        c: i32 | Bar | Foo | void,
    }

    pub fn show(self) -> void {
        if self.c is Bar {
            var tmp = self.c as Bar;
            tmp.show();
        }
    }
}

fn main(args: [str]) -> i32 {
    var a: Foo = Foo -> {};
    var b: Bar = Bar -> { a: 5, b: a };
    var c: Baz = Baz -> { c: 5 };

    c.c = b;

    var x = c.c;

    match x {
        on void;
        else std::io::println("c is not void");
    }

    if c.c is Bar {
        var tmp = c.c as Bar;
        tmp.show();
    }
    if c.c is Foo {
        var tmp = c.c as Foo;
        tmp.show();
    }

    return 0;
}
